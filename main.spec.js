// Generated by Selenium IDE
const { Builder, By, Key, until } = require("selenium-webdriver");
const assert = require("assert");
const fs = require("fs");
const path = require("path");

/**
 * Write log message to multiple files while maintaining console.log
 * @param {string|string[]} files - Single file path or array of file paths
 * @param {string} message - Message to log
 */
function writeLog(files, message) {
  // Keep the console.log
  console.log(message);

  // Convert single file to array
  const fileArray = Array.isArray(files) ? files : [files];

  // Get current timestamp
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;

  // Write to each file
  fileArray.forEach((filePath) => {
    try {
      // Create directory if it doesn't exist
      const dir = path.dirname(filePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // Append to file
      fs.appendFileSync(filePath, logMessage);
    } catch (error) {
      console.error(`Error writing to log file ${filePath}:`, error);
    }
  });
}

describe("tes1", function () {
  this.timeout(0); // Set Mocha's timeout for test cases
  let driver;
  let vars;
  beforeEach(async function () {
    driver = await new Builder().forBrowser("chrome").build();
    vars = {};
  });
  afterEach(async function () {
    await driver.sleep(120000); // 2 minutes
    await driver.quit();
  });
  it("tes1", async function () {
    console.log("Mengakses halaman skrining");
    await driver.get("https://webskrining.bpjs-kesehatan.go.id/skrining");
    await driver.manage().window().setRect({ width: 866, height: 1025 });

    console.log("Memasukkan NIK");
    writeLog("logs/test.log", "Memasukkan NIK");
    await driver.findElement(By.id("nik_txt")).click();
    await driver.findElement(By.id("nik_txt")).sendKeys("0000910424496");

    console.log("Memasukkan tanggal lahir");
    writeLog("logs/test.log", "Memasukkan tanggal lahir");
    await driver.findElement(By.id("TglLahir_src")).click();
    await driver.findElement(By.id("TglLahir_src")).sendKeys("28-11-2004");

    await driver.findElement(By.id("TglLahir_src")).sendKeys(Key.ESCAPE);

    console.log("Waiting for captcha");
    await driver.findElement(By.id("captchaCode_txt")).click();

    let inputCaptcha = await driver
      .findElement(By.id("captchaCode_txt"))
      .getAttribute("value");
    let startTime = Date.now();
    let timeElapsed = 0;
    while (inputCaptcha.length < 5 && timeElapsed < 7000) {
      await driver.sleep(200);
      inputCaptcha = await driver
        .findElement(By.id("captchaCode_txt"))
        .getAttribute("value");
      console.log(inputCaptcha, Date.now() - startTime);
    }

    console.log("Click login");
    await driver.findElement(By.id("btnCariPetugas")).click();

    // Explicit wait to locate the .btn-success element
    try {
      const petugasButton = await driver.wait(
        until.elementLocated(By.css(".btn-success")), // Wait for the element
        60000 // Timeout of 60 seconds
      );
      await driver.wait(
        until.elementIsVisible(petugasButton), // Ensure the element is visible
        60000 // Timeout of 60 seconds
      );
      await petugasButton.click(); // Click the element
    } catch (err) {
      console.error("Error locating or clicking the .btn-success button:", err);
      throw err; // Rethrow the error for debugging purposes
    }

    console.log("Memasukkan berat badan");
    await driver.findElement(By.id("beratBadan_txt")).click();
    await driver.findElement(By.id("beratBadan_txt")).sendKeys("60");

    console.log("Memasukkan tinggi badan");
    await driver.findElement(By.id("tinggiBadan_txt")).sendKeys("160");

    console.log("Memasukkan nomor HP");
    await driver.findElement(By.id("nohp_txt")).click();

    console.log("Click Next (enter form page)");
    await driver.findElement(By.id("nextGenBtn")).click();
  });
});
